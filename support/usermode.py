from aiogram import Router, Bot, F
from aiogram.filters import StateFilter
from aiogram import types
from aiogram.fsm.context import FSMContext
from handlers import Form
from config import admin_group_chat_id
from sqlalchemy.ext.asyncio import AsyncSession

from support.supported_media import SupportedMediaFilter
from aiogram.types import Message

support_user_router = Router()



@support_user_router.message(F.text, StateFilter(Form.support))
async def handle_report(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    print('–≤ –æ–±—ã—á–Ω–æ–º —Ö—ç–Ω–¥–ª–µ—Ä–µ')
    await bot.send_message(chat_id = admin_group_chat_id, text = message.html_text + f"\n\n#id{message.from_user.id}", parse_mode="HTML")
    await state.clear()
    await message.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞üôÇ')
    
    
@support_user_router.message(SupportedMediaFilter(), StateFilter(Form.support))
async def supported_media(message: Message, state: FSMContext):
    print('–≤ –º–µ–¥–∏–∞ —Ö—ç–Ω–¥–ª–µ—Ä–µ')
    if message.caption and len(message.caption) > 1000:
        return await message.reply('–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ')
    else:
        await message.copy_to(chat_id= admin_group_chat_id,
            caption=((message.caption or "") + f"\n\n#id{message.from_user.id}"),
            parse_mode="HTML"
        )
        await state.clear()
        await message.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞üôÇ')